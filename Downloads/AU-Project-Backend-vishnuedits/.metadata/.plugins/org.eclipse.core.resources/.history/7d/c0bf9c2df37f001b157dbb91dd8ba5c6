package com.app.Project.controller;

import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.app.Project.model.Category;
import com.app.Project.model.Likes;
import com.app.Project.model.ReportedComments;
import com.app.Project.model.User;
import com.app.Project.model.Comment;
import com.app.Project.model.Video;
import com.app.Project.service.CategoryService;
import com.app.Project.service.CommentService;
import com.app.Project.service.RegistrationService;
import com.app.Project.service.ReportedCommentService;
import com.app.Project.service.VideoService;

@RestController
public class ReportedCommentController {
	
	
	@Autowired
	CommentService cservice;
	
	@Autowired
	RegistrationService rservice;
	
	@Autowired
	ReportedCommentService repcomservice;
	
	@CrossOrigin(origins="http://localhost:4200")
	@PostMapping("/reportvideo")
	public ReportedComments uploadReportedComment(@RequestBody ReportedComments repcom) {
		
		
		ReportedComments repcomObj=null;
		repcomObj=repcomservice.saveReportedComment(repcom);
		return repcomObj;
	}
	
	
	@SuppressWarnings("null")
	@CrossOrigin(origins="http://localhost:4200")
	@GetMapping(value="/getReportedComments", produces="application/json")
	public void getReportedComments() {
		
		List<ReportedComments> allReportedCom=repcomservice.getReportedComments();
		for(ReportedComments reportedCom: allReportedCom) {
			List<User> uObj=(List<User>) rservice.getUserByRepCom(reportedCom);
			Comment comObj=cservice.getCommentByRepComId(reportedCom);
			for(User u: uObj) {
				String userNameWhoReportedComments= u.getFirstName()+" "+u.getLastName();
				String comment=comObj.getCommentId();
				System.out.println(u.getFirstName());
			}
		}
		/*
		 //Set<Comment> setOfComments= ;
		List<Comment> comObj=cservice.fetchAllComment();
		System.out.println(comObj);
		List<User> userObj=rservice.getUser();
		Set<ReportedComments> setOfReportedComments = null; 
		for(User u: userObj) {
			if(u.getReportedCom().size()>0) {
				for(ReportedComments rep: u.getReportedCom()) {
					User uObj=rservice.getUserByRepCom(rep);
					
						
				}
				//setOfReportedComments.addAll(u.getReportedCom());
				//System.out.println("a"+u.getReportedCom());
			}
		}
		
		//Comment cObj=setOfComments.iterator().next();
		return repcomObj;*/
	}
	
	
	
	/*
	 @CrossOrigin(origins="http://localhost:4200")
	@GetMapping(value="/play/{id}",produces = "application/json")
	public String read(@PathVariable("id") int videoId) {
		Video vObj= vservice.getVideo(videoId);
		Set<Comment> setOfComments= vObj.getComment();
		if(setOfComments.size()==0) {
			return vObj.toString();
		}
		Comment cObj=setOfComments.iterator().next();
		User uObj=service.getUserByCom(cObj);
		String userNameOnComment= uObj.getFirstName()+" "+uObj.getLastName();
		
		JSONObject jsonObj = new JSONObject( vObj );
		System.out.println("\n\n");
		Iterator<String> keys = jsonObj.keys();
		while(keys.hasNext()) {
		    String key = keys.next();		    
		    if(key.equals("comment")) {
		    	JSONArray modi= (JSONArray) jsonObj.get(key);
		    	int numberOfComments=modi.length();
		    	for(int i=0;i<numberOfComments;i++) {
		    		JSONObject toModi=(JSONObject) modi.get(i);
			    	toModi.put("Commentor", userNameOnComment);
		    	}
		    }
		}
		return jsonObj.toString();
	}
	 */
	
	@CrossOrigin(origins="http://localhost:4200")
	@GetMapping("/reportComment/{commentId}/{userId}")
	public void postRequest(@PathVariable("commentId") int commentId, @PathVariable("userId") int userId) {
		ReportedComments repcomObj=new ReportedComments();
		User uObj=rservice.fetchUserById(userId);
		Comment comObj=cservice.fetchCommentbyId(commentId);
		Set<ReportedComments> setOfReportedCommentByUser=uObj.getReportedCom();
		Set<ReportedComments> setOfReportedComments=comObj.getReportedCom();
		setOfReportedCommentByUser.retainAll(setOfReportedComments);
		int isReported=setOfReportedCommentByUser.size();
		//System.out.println(isLiked);
		if(isReported==0) {
			repcomservice.saveReportedComment(repcomObj);
			rservice.updateReportedComment(userId, repcomObj);
			cservice.updateReportedComment(commentId,repcomObj);
		}
	
	}
	

	
	
	
}
