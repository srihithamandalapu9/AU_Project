package com.app.Project.controller;

import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.app.Project.model.Category;
import com.app.Project.model.Likes;
import com.app.Project.model.ReportedComments;
import com.app.Project.model.User;
import com.app.Project.model.Comment;
import com.app.Project.model.Video;
import com.app.Project.service.CategoryService;
import com.app.Project.service.CommentService;
import com.app.Project.service.RegistrationService;
import com.app.Project.service.ReportedCommentService;
import com.app.Project.service.VideoService;

@RestController
public class ReportedCommentController {
	
	@Autowired
	CommentService cservice;
	
	@Autowired
	RegistrationService rservice;
	
	@Autowired
	ReportedCommentService repcomservice;
	
	@CrossOrigin(origins="http://localhost:4200")
	@PostMapping("/reportvideo")
	public ReportedComments uploadReportedComment(@RequestBody ReportedComments repcom) {
		
		
		ReportedComments repcomObj=null;
		repcomObj=repcomservice.saveReportedComment(repcom);
		return repcomObj;
	}
	
	@CrossOrigin(origins="http://localhost:4200")
	@GetMapping(value="/getReportedComments", produces="application/json")
	public List<ReportedComments> getReportedComments() {
		return repcomservice.getReportedComments();
	}
	
	@CrossOrigin(origins="http://localhost:4200")
	@GetMapping("/reportComment/{commentId}/{userId}")
	public void postRequest(@PathVariable("commentId") int commentId, @PathVariable("userId") int userId) {
		ReportedComments repcomObj=new ReportedComments();
		User uObj=rservice.fetchUserById(userId);
		Comment comObj=cservice.fetchCommentbyId(commentId);
		Set<ReportedComments> setOfReportedCommentByUser=uObj.getReportedCom();
		Set<ReportedComments> setOfReportedComments=comObj.getReportedCom();
		setOfReportedCommentByUser.retainAll(setOfReportedComments);
		int isReported=setOfReportedCommentByUser.size();
		//System.out.println(isLiked);
		if(isReported==0) {
			repcomservice.saveReportedComment(repcomObj);
			rservice.updateReportedComment(userId, repcomObj);
			cservice.updateReportedComment(commentId,repcomObj);
		}
	
	}
	
	
	
}
